{
    "pipes": [],
    "interfaces": [
        {
            "name": "Environment",
            "id": "interface-Environment-ac8ce96d76326f739931572eb5e8a60e4bceb84b4810c046febc6370073f582d298fd85058bc65d77321b44c048317bc775f8abdd9f356894d3de389f46b56b6",
            "file": "src/app/adapters/image.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {\n  HttpClient,\n  HttpRequest,\n  HttpEvent,\n  HttpHeaders,\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { environment as env } from '../../environments/environment';\nimport { Image } from '../interfaces/image.interface';\n\ninterface Environment {\n  baseAPIUrl: string;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ImageService {\n  private baseAPIUrl = (env as Environment).baseAPIUrl;\n  private imagesAPI = '/api/images';\n  private imageAPIUrl = `${this.baseAPIUrl}${this.imagesAPI}`;\n\n  // private _headers = new HttpHeaders();\n\n  constructor(private http: HttpClient) {\n    // this._headers.set('Content-Type', 'application/json; charset=utf-8');\n  }\n\n  createImage(imageData: FormData): Observable<FormData> {\n    return this.http.post<FormData>(\n      `${this.imageAPIUrl}/upload-image`,\n      imageData\n    );\n  }\n\n  updateImage(imageUpdateData: FormData, id: string) {\n    return this.http.put(\n      `${this.imageAPIUrl}/update-image/` + id,\n      imageUpdateData\n    );\n  }\n\n  getImages(): Observable<any> {\n    return this.http.get(`${this.imageAPIUrl}/get-images`);\n  }\n\n  getImage(imageId: number): Observable<Image> {\n    return this.http.get<Image>(`${this.imageAPIUrl}/get-image/${imageId}`);\n  }\n\n  OLDupdateImage(imageData: FormData, imageId: number): Observable<Image> {\n    return this.http.put<Image>(\n      `${this.imageAPIUrl}/update-image/${imageId}`,\n      imageData\n    );\n  }\n\n  deleteImage(imageId: string): Observable<Image> {\n    return this.http.delete<Image>(\n      `${this.imageAPIUrl}/delete-image/${imageId}`\n    );\n  }\n}\n",
            "properties": [
                {
                    "name": "baseAPIUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Image",
            "id": "interface-Image-37bfabcdd678aabe2be38690ef6a4e2ae03497b8f5637489d4ec420ff095e4e8a3559d5ed3d0ec172eee0b8e241cfe22ada58bba27fa66be492e44157009dbe7",
            "file": "src/app/interfaces/image.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Image {\n  title: string;\n  description: string;\n  caption: string;\n  comments: string;\n  dateTaken: string;\n  tags: string[];\n  image: string;\n}\n",
            "properties": [
                {
                    "name": "caption",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "comments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "dateTaken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "image",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "tags",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Tag",
            "id": "interface-Tag-e13872fe6775a0434f2ac2aa9cee12ad02110b2b2e4b5b2ee55f86d95f0313a9ae54f5e35f3f0fb43e3f566de95bffd7a23f743f5f12755d59bf2ea7a1c09f18",
            "file": "src/app/interfaces/tag.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Tag {\n  _id: string;\n  id: string;\n  tag: string;\n  description?: string;\n  count?: number;\n}\n",
            "properties": [
                {
                    "name": "_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "count",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "tag",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "User",
            "id": "interface-User-d4821beac0e4a852e513391b7470981c4353fdd95a18628bb68136c8695b489ee15b926e2e5031bc26cf30e1508e0a362c3ee13a06734702b4d15af140e485d5",
            "file": "src/stories/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\n  name: string;\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "AlbumsService",
            "id": "injectable-AlbumsService-8c8d3a26168d9822cdb82a90179d1d5e004061cd705715383621e9e931e36a3b6f81aaa37f0f3a628ed40292129afa8c1d5f5e670b0465d56ec376104c0e082a",
            "file": "src/app/adapters/albums.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getAlbums",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any[]>",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AlbumsService {\n  constructor() {}\n\n  getAlbums(): Observable<any[]> {\n    return of([\n      {\n        album: 'Destinations',\n        description: 'Destination photography is blah, blah, blah',\n        images: [{ src: 'pics/--215-Edit.jpg', title: '', description: '' }],\n      },\n      {\n        album: 'Proposals',\n        alignment: 'right',\n        description: '',\n        images: [\n          {\n            src: 'pics/8-Edit.jpg',\n            title: 'Proposals',\n            description: 'description',\n          },\n        ],\n      },\n      {\n        album: 'Families',\n        description: 'Families photography is blah, blah, blah',\n        images: [\n          {\n            src: 'pics/23-Edit.jpg',\n            title: 'Families',\n            description: 'description',\n          },\n        ],\n      },\n      {\n        album: 'Portraits',\n        albumColor: 'lightgreen',\n        description: 'Portraits photography is blah, blah, blah',\n        alignment: 'right',\n        images: [\n          {\n            src: 'pics/16-Edit.jpg',\n            title: 'Portraits',\n            description: 'description',\n          },\n        ],\n      },\n      {\n        album: 'Weddings',\n        description: 'Weddings photography is blah, blah, blah',\n        images: [\n          {\n            src: 'pics/208-Edit.jpg',\n            title: 'Weddings',\n            description: 'description',\n          },\n        ],\n      },\n      {\n        album: 'Underwater',\n        albumColor: 'lightblue',\n        description: 'Underwater photography is blah, blah, blah',\n        images: [\n          {\n            src: 'pics/--P3120194-Edit-Edit-Edit-Edit.jpg',\n            title: 'Underwater',\n            description: 'description',\n          },\n          {\n            src: 'pics/179-Edit-2.jpg',\n            title: 'Underwater',\n            description: 'description',\n          },\n          {\n            src: 'pics/CM7P7948-Edit-Edit.jpg',\n            title: 'Underwater',\n            description: 'description',\n          },\n        ],\n      },\n\n      {\n        album: 'Special Announcements',\n        alignment: 'right',\n        description: 'Special Occasions photography is blah, blah, blah',\n        images: [\n          {\n            src: 'pics/0050-Edit.jpg',\n            title: 'Special Occasions',\n            description: 'description',\n          },\n        ],\n      },\n      {\n        album: 'Landscapes',\n        albumColor: 'lightyellow',\n        description: 'Landscapes photography is blah, blah, blah',\n        images: [\n          {\n            src: 'pics/dxthm1000.CM7P7336-Edit.jpg',\n            title: 'Landscapes',\n            description: 'description',\n          },\n        ],\n      },\n      {\n        album: 'Celebrities',\n        alignment: 'right',\n        albumColor: 'white',\n        description: 'Celebrities photography is blah, blah, blah',\n        images: [\n          {\n            src: 'pics/dxthm1000.003work.jpg',\n            title: 'Celebrities',\n            description: 'description',\n          },\n        ],\n      },\n    ]);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 7
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "CarouselService",
            "id": "injectable-CarouselService-2a2085707dfcf1a1dd3d1ad5ed1300862f97ddefadd17d4dffa27f687d4c529ae9e9ed7001ffb78ff7363c16924105c0d58fb15156a941b4bab48917dbe6bbba",
            "file": "src/app/adapters/carousel.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getSlides",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any[]>",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n@Injectable({\n  providedIn: 'root',\n})\nexport class CarouselService {\n  constructor() {}\n\n  getSlides(): Observable<any[]> {\n    return of([\n      {\n        src: 'url(assets/images/pics/--155-Edit-Edit.jpg)',\n        alt: 'photo 1',\n        slider: {\n          width: 250,\n          height: 300,\n          sliderClass: 'coral',\n          typingText: 'Professional Photography',\n          header: 'Wedding Photography',\n          headerColor: '',\n          subHeader: '',\n          subHeaderColor: '',\n          content:\n            \"Professional wedding photography is an art form that goes beyond capturing moments; it encapsulates emotions, stories, and the essence of one of the most significant days in a couple's life. It involves a delicate balance of technical expertise, creativity, and interpersonal skills to deliver timeless images that evoke nostalgia and joy for years to come.        \",\n          contentColor: '',\n          origin: '-350 250 0 0',\n          destination: '200 400 0 0',\n        },\n      },\n      {\n        src: 'url(assets/images/pics/--501-Edit.jpg)',\n        alt: 'Wedding Photography Destination Belize',\n        slider: {\n          width: 400,\n          height: 500,\n          sliderClass: '',\n          header: 'Exotic Locations',\n          headerColor: '',\n          subHeader: '',\n          subHeaderColor: '',\n          content: [\n            `In the heart of an exotic paradise, where azure waters kiss powdery sands and verdant palms sway in rhythm with love's gentle dance, wedding portraits \n      transcend mere snapshots; they become timeless canvases of romance and adventure. Against a backdrop of majestic mountains or \n      beneath the vibrant hues of a tropical sunset, the couple's love story unfolds in each captured moment.`,\n            `A moment suspended in time, where love, beauty, and paradise intertwine in perfect harmony.`,\n          ],\n          contentColor: '',\n          origin: '0 -550 -500 0',\n          destination: '0 250 50 0',\n        },\n      },\n      {\n        src: 'url(assets/images/pics/--98-Edit.jpg)',\n        alt: 'Two Flower Girls',\n        slider: {\n          width: 350,\n          height: 500,\n          sliderClass: '',\n          header: 'Precious Memories',\n          headerColor: '',\n          subHeader: '',\n          subHeaderColor: '',\n          content: [\n            `In a tropical paradise, small feet leave imprints in soft sand, giggles dancing in the warm breeze. Sun-kissed faces adorned with bright smiles, chasing each other down pristine beaches. Innocent eyes marvel at vibrant corals, tiny fingers tracing patterns in tide pools, accompanied by seagulls on sun-drenched shores.`,\n            `Nights alive with the enchanting chorus of crickets, as little ones drift off to dreams under a canopy of stars. These moments, woven into the fabric of paradise, become the timeless jewels of childhood, sparkling with the magic of the tropics, forever etched in the heart's treasure trove.`,\n          ],\n          contentColor: '',\n          origin: '0 500 -320',\n          destination: '0 650 0 250',\n        },\n      },\n      {\n        src: 'url(assets/images/pics/--Edit-2121.jpg)',\n        alt: 'Happy Hour Bridesmaids',\n      },\n      {\n        src: 'url(assets/images/pics/--115-Edit.jpg)',\n        alt: 'Couple Kissing Sunset',\n      },\n      {\n        src: 'url(assets/images/pics/--0161-Edit.jpg)',\n        alt: 'Married Couple Walking on Beach',\n      },\n      {\n        src: 'url(assets/images/pics/--281-Edit.3.jpg)',\n        alt: 'Married Couple Kissing Underwater',\n      },\n      {\n        src: 'url(assets/images/pics/49-Edit-Edit.jpg)',\n        alt: 'Portrait Lady Chair Ocean',\n      },\n      {\n        src: 'url(assets/images/pics/--135-Edit.jpg)',\n        alt: 'Sea Turtle Underwater',\n        slider: {\n          width: 250,\n          height: 300,\n          sliderClass: 'coral',\n          header: 'Extoic Underwater Photography',\n          headerColor: '',\n          subHeader: '',\n          subHeaderColor: '',\n          content: `Underwater photography captures a hidden world of \n          mesmerizing beauty. Beneath the waves, vibrant corals sway \n          ]and elusive creatures glide with grace. The lens reveals a \n          kaleidoscope of colors, from the azure depths to the sunlit \n          shallows. Mastering this art requires skill in buoyancy control, \n          composition, and understanding light's behavior in water. Each \n          click immortalizes fleeting moments, preserving the ocean's mystique. \n          Through these images, we connect with an aquatic realm, inspiring awe \n           and fostering conservation efforts for its preservation.`,\n          contentColor: '',\n          origin: '200 100 0 0',\n        },\n      },\n    ]);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 6
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "DomainService",
            "id": "injectable-DomainService-0d03eab8127d97a7da6e35f6a856f9b7db21c1c47a2045e871a39ff4b4a1e12b8bc541757c75a0e33962d3e49dc46a5eb9ad6c9d290715e807757a17aff0b43a",
            "file": "src/app/adapters/domain.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getDomain",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n@Injectable({\n  providedIn: 'root',\n})\nexport class DomainService {\n  constructor() {}\n\n  getDomain() {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 6
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ImageService",
            "id": "injectable-ImageService-ac8ce96d76326f739931572eb5e8a60e4bceb84b4810c046febc6370073f582d298fd85058bc65d77321b44c048317bc775f8abdd9f356894d3de389f46b56b6",
            "file": "src/app/adapters/image.service.ts",
            "properties": [
                {
                    "name": "baseAPIUrl",
                    "defaultValue": "(env as Environment).baseAPIUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "imageAPIUrl",
                    "defaultValue": "`${this.baseAPIUrl}${this.imagesAPI}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "imagesAPI",
                    "defaultValue": "'/api/images'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createImage",
                    "args": [
                        {
                            "name": "imageData",
                            "type": "FormData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<FormData>",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "imageData",
                            "type": "FormData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteImage",
                    "args": [
                        {
                            "name": "imageId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Image>",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "imageId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getImage",
                    "args": [
                        {
                            "name": "imageId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Image>",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "imageId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getImages",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "OLDupdateImage",
                    "args": [
                        {
                            "name": "imageData",
                            "type": "FormData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "imageId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Image>",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "imageData",
                            "type": "FormData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "imageId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateImage",
                    "args": [
                        {
                            "name": "imageUpdateData",
                            "type": "FormData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "imageUpdateData",
                            "type": "FormData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {\n  HttpClient,\n  HttpRequest,\n  HttpEvent,\n  HttpHeaders,\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { environment as env } from '../../environments/environment';\nimport { Image } from '../interfaces/image.interface';\n\ninterface Environment {\n  baseAPIUrl: string;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ImageService {\n  private baseAPIUrl = (env as Environment).baseAPIUrl;\n  private imagesAPI = '/api/images';\n  private imageAPIUrl = `${this.baseAPIUrl}${this.imagesAPI}`;\n\n  // private _headers = new HttpHeaders();\n\n  constructor(private http: HttpClient) {\n    // this._headers.set('Content-Type', 'application/json; charset=utf-8');\n  }\n\n  createImage(imageData: FormData): Observable<FormData> {\n    return this.http.post<FormData>(\n      `${this.imageAPIUrl}/upload-image`,\n      imageData\n    );\n  }\n\n  updateImage(imageUpdateData: FormData, id: string) {\n    return this.http.put(\n      `${this.imageAPIUrl}/update-image/` + id,\n      imageUpdateData\n    );\n  }\n\n  getImages(): Observable<any> {\n    return this.http.get(`${this.imageAPIUrl}/get-images`);\n  }\n\n  getImage(imageId: number): Observable<Image> {\n    return this.http.get<Image>(`${this.imageAPIUrl}/get-image/${imageId}`);\n  }\n\n  OLDupdateImage(imageData: FormData, imageId: number): Observable<Image> {\n    return this.http.put<Image>(\n      `${this.imageAPIUrl}/update-image/${imageId}`,\n      imageData\n    );\n  }\n\n  deleteImage(imageId: string): Observable<Image> {\n    return this.http.delete<Image>(\n      `${this.imageAPIUrl}/delete-image/${imageId}`\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "TagService",
            "id": "injectable-TagService-47e9abf76778ad777b1288268f6c66ba11c3565b853923632d532b05cd5d7f3e82f8f2c6f63155417569feb7eeee2fa149d2a79d8da0fa11a5dc91ef3b6c343e",
            "file": "src/app/adapters/tag.service.ts",
            "properties": [
                {
                    "name": "baseAPIUrl",
                    "defaultValue": "environment.baseAPIUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "tagsAPI",
                    "defaultValue": "`${environment.API}/tags`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "tagsAPIUrl",
                    "defaultValue": "`${this.baseAPIUrl}${this.tagsAPI}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addTag",
                    "args": [
                        {
                            "name": "tag",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "tag",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTag",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTags",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Tag[]>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport { Tag } from '../interfaces/tag.interface';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TagService {\n  private baseAPIUrl: string = environment.baseAPIUrl;\n  private tagsAPI = `${environment.API}/tags`;\n  private tagsAPIUrl = `${this.baseAPIUrl}${this.tagsAPI}`;\n\n  constructor(private http: HttpClient) {}\n\n  getTags(): Observable<Tag[]> {\n    const url = `${this.tagsAPIUrl}/get-tags`;\n    return this.http.get(url) as Observable<Tag[]>;\n  }\n\n  getTag(id: string): Observable<any> {\n    return this.http.get(`${this.tagsAPIUrl}/get-tag/:${id}`);\n  }\n\n  addTag(tag: string): Observable<any> {\n    return this.http.post(`${this.tagsAPIUrl}/add-tag`, { tag });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "WeatherService",
            "id": "injectable-WeatherService-f026f486333e6e4b1000447520c54a419f14a66f95fd7aeb8f929709b380181a4db053becf284202512cf241fd44e9562d0d2fa9418652aa7bfb70ca68e974e1",
            "file": "src/app/adapters/weather.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getAstro",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getMarine",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getMoonPhase",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getWeather",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, catchError, throwError } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class WeatherService {\n  constructor(private http: HttpClient) {}\n\n  getWeather(): Observable<any> {\n    return this.http\n      .get<any>(`http://localhost:3000/api/weather/forecast`)\n      .pipe(\n        catchError((error) => {\n          console.error('Error fetching JSON data:', error);\n          return throwError(\n            () => new Error('Something went wrong; please try again later.')\n          );\n        })\n      );\n  }\n\n  getMarine(): Observable<any> {\n    return this.http.get<any>(`http://localhost:3000/api/weather/marine`).pipe(\n      catchError((error) => {\n        console.error('Error fetching JSON data:', error);\n        return throwError(\n          () => new Error('Something went wrong; please try again later.')\n        );\n      })\n    );\n  }\n\n  getAstro(): Observable<any> {\n    return this.http.get<any>(`http://localhost:3000/api/weather/astro`).pipe(\n      catchError((error) => {\n        console.error('Error fetching JSON data:', error);\n        return throwError(\n          () => new Error('Something went wrong; please try again later.')\n        );\n      })\n    );\n  }\n\n  getMoonPhase(): Observable<any> {\n    return this.http.get<any>(`http://localhost:3000/api/weather/moon`).pipe(\n      catchError((error) => {\n        console.error('Error fetching JSON data:', error);\n        return throwError(\n          () => new Error('Something went wrong; please try again later.')\n        );\n      })\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [
        {
            "name": "DndDirective",
            "id": "directive-DndDirective-d7842319f879ed03e2422a5be8bda7d2906494970948ecce4882798dfb9a3e052123eee3f6686aa379e683d4a4616667f5b98fb04da248ac19ad670c82aa370e",
            "file": "src/app/directives/dnd.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  Directive,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  Output,\n} from '@angular/core';\n\n@Directive({\n  selector: '[wbpDnd]',\n  standalone: true,\n})\nexport class DndDirective {\n  @HostBinding('class.fileover') fileOver!: boolean;\n  @Output() fileDropped = new EventEmitter<any>();\n\n  // Dragover listener\n  @HostListener('dragover', ['$event']) onDragOver(evt: any) {\n    evt.pranyDefault();\n    evt.stopPropagation();\n    console.log('Dragover');\n    this.fileOver = true;\n  }\n\n  // Dragleave listener\n  @HostListener('dragleave', ['$event']) public onDragLeave(evt: Event) {\n    evt.preventDefault();\n    evt.stopPropagation();\n    console.log('Dragleave');\n    this.fileOver = false;\n  }\n\n  // Drop listener\n  @HostListener('drop', ['$event']) public ondrop(evt: any) {\n    evt.preventDefault();\n    evt.stopPropagation();\n    console.log('drop');\n    this.fileOver = false;\n    let files = evt.dataTransfer.files;\n    if (files.length > 0) {\n      this.fileDropped.emit(files);\n    }\n  }\n}\n",
            "selector": "[wbpDnd]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "fileDropped",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "EventEmitter"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.fileover",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "hostListeners": [
                {
                    "name": "dragleave",
                    "args": [
                        {
                            "name": "evt",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26
                },
                {
                    "name": "dragover",
                    "args": [
                        {
                            "name": "evt",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18
                },
                {
                    "name": "drop",
                    "args": [
                        {
                            "name": "evt",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34
                }
            ],
            "propertiesClass": [
                {
                    "name": "fileOver",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.fileover'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onDragLeave",
                    "args": [
                        {
                            "name": "evt",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'dragleave', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "evt",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDragOver",
                    "args": [
                        {
                            "name": "evt",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'dragover', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": "evt",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ondrop",
                    "args": [
                        {
                            "name": "evt",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'drop', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "evt",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "extends": []
        },
        {
            "name": "OnCreate",
            "id": "directive-OnCreate-1201f38339ec7e9494494435af26b0bfe8381d6e7e109ae5451d482e868c29861ff5d217dbd49329393cc0768b1ee91f7051e1cf129fc19cc6208d599f798bb9",
            "file": "src/app/directives/onCreate.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  Directive,\n  Output,\n  EventEmitter,\n  Input,\n  SimpleChange,\n} from '@angular/core';\n\n@Directive({\n  standalone: true,\n  selector: '[onCreate]',\n})\nexport class OnCreate {\n  @Output() onCreate: EventEmitter<any> = new EventEmitter<any>();\n  constructor() {}\n  ngOnInit() {\n    this.onCreate.emit('');\n  }\n}\n",
            "selector": "[onCreate]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "onCreate",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "EventEmitter<any>"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "extends": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 14
            }
        }
    ],
    "components": [
        {
            "name": "AdminComponent",
            "id": "component-AdminComponent-dfac2261ae5878691f4fdfee19cc89c65a7e91c0c064432dd8b155ef0d5c6c2bc19ed4a8d1a4648240356d6caca6d747997858b5123bbd59e57f445f87bacebb",
            "file": "src/app/components/sections/admin/admin.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "wbp-dashboard",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./admin.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "AdminNavBarComponent",
                    "type": "component"
                },
                {
                    "name": "AdminFooterComponent",
                    "type": "component"
                },
                {
                    "name": "AdminDashboardComponent",
                    "type": "component"
                },
                {
                    "name": "RouterOutlet"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { RouterOutlet } from '@angular/router';\nimport { AdminNavBarComponent } from '../../page-elements/admin/layout/nav-bar/nav-bar.component';\nimport { AdminFooterComponent } from '../../page-elements/admin/layout/footer/footer.component';\nimport { AdminDashboardComponent } from '../../page-elements/admin//dashboard/dashboard.component';\n@Component({\n  selector: 'wbp-dashboard',\n  imports: [\n    AdminNavBarComponent,\n    AdminFooterComponent,\n    AdminDashboardComponent,\n    RouterOutlet,\n  ],\n  standalone: true,\n  templateUrl: './admin.component.html',\n  styleUrl: './admin.component.scss',\n})\nexport class AdminComponent {}\n",
            "styleUrl": "./admin.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"beach\">\n <wbp-admin-nav></wbp-admin-nav>\n <router-outlet></router-outlet>\n <wbp-admin-footer></wbp-admin-footer>\n</div>"
        },
        {
            "name": "AdminDashboardComponent",
            "id": "component-AdminDashboardComponent-4d650c0b49d10c2444f43f6f7ad610ec0a4efd13debfd42106a150834dae01219f074829368faa5d00ef2934291de92aaa777a7b90633912a5076aa5a6b06c51",
            "file": "src/app/components/page-elements/admin/dashboard/dashboard.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "wbp-admin-dashboard",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./dashboard.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'wbp-admin-dashboard',\n  standalone: true,\n  imports: [],\n  templateUrl: './dashboard.component.html',\n  styleUrl: './dashboard.component.scss',\n})\nexport class AdminDashboardComponent {}\n",
            "styleUrl": "./dashboard.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<p>dashboard works!</p>\n"
        },
        {
            "name": "AdminFooterComponent",
            "id": "component-AdminFooterComponent-f47ae4e3fc03458b5dc1e20e4ebab08052566680569276655e5dfd1a7ab97091f64e8166fbab3a861a3270cd47a8b871b1c1d6fd725bc92b4a41c817dd24a26e",
            "file": "src/app/components/page-elements/admin/layout/footer/footer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "wbp-admin-footer",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./footer.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'wbp-admin-footer',\n  standalone: true,\n  imports: [],\n  templateUrl: './footer.component.html',\n  styleUrl: './footer.component.scss',\n})\nexport class AdminFooterComponent {}\n",
            "styleUrl": "./footer.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": ""
        },
        {
            "name": "AdminNavBarComponent",
            "id": "component-AdminNavBarComponent-9c3a25012a7d032760166f8a0097fb6f23719943a77fa7189c302e3dc37a34dc75633ef6f01662faf8b2acb7e2cad6ad2d22069e245b3aaa29b6c5d5b978328e",
            "file": "src/app/components/page-elements/admin/layout/nav-bar/nav-bar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "wbp-admin-nav",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./nav-bar.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterLink"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\nimport { provideRouter, Route, RouterLink } from '@angular/router';\n@Component({\n  selector: 'wbp-admin-nav',\n  standalone: true,\n  imports: [RouterLink],\n  templateUrl: './nav-bar.component.html',\n  styleUrl: './nav-bar.component.scss',\n})\nexport class AdminNavBarComponent {}\n",
            "styleUrl": "./nav-bar.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<nav class=\"navbar navbar-expand-lg bg-light\">\n <div class=\"container-fluid\">\n  <a class=\"navbar-brand\" href=\"#\"><img src=\"/assets/images/logos/flourish.png\" alt=\"\" class=\"admin-logo\"></a>\n  <button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\"\n   aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n   <span class=\"navbar-toggler-icon\"></span>\n  </button>\n  <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n   <ul class=\"navbar-nav me-auto mb-2 mb-lg-0\">\n    <li class=\"nav-item\">\n     <a class=\"nav-link active\" aria-current=\"page\" href=\"#\">Dashboard</a>\n    </li>\n\n    <li class=\"nav-item dropdown\">\n     <a class=\"nav-link dropdown-toggle\" href=\"#\" role=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\n      Images\n     </a>\n     <ul class=\"dropdown-menu\">\n      <li><a class=\"dropdown-item\" [routerLink]=\"['/admin/images/upload']\">Upload</a></li>\n      <li><a class=\"dropdown-item\" href=\"#\">Browse</a></li>\n      <li><a class=\"dropdown-item\" href=\"#\">Manage</a></li>\n      <li>\n       <hr class=\"dropdown-divider\">\n      </li>\n      <li><a class=\"dropdown-item\" href=\"#\">Delete</a></li>\n     </ul>\n    </li>\n    <!-- <form class=\"d-flex\" role=\"search\">\n     <input class=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\">\n     <button class=\"btn btn-outline-success\" type=\"submit\">Search</button>\n    </form> -->\n   </ul>\n  </div>\n </div>\n</nav>"
        },
        {
            "name": "AlbumsComponent",
            "id": "component-AlbumsComponent-49555540ff85490a87e9acc15f3eb3df99ba23f5b5d64f2d4239d2bf3bb8c9158734e14a37693fb0ace90f90211d5d93d6c419eb6e178db123e00f33cfa45767",
            "file": "src/app/components/page-elements/albums/albums.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "wbp-albums",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./albums.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "albums",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "albumSelected",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "selectedAlbum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "closeAlbum",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openAlbum",
                    "args": [
                        {
                            "name": "album",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "album",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setBackgroundImage",
                    "args": [
                        {
                            "name": "album",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "album",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "titleAlignment",
                    "args": [
                        {
                            "name": "album",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "album",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "titleColor",
                    "args": [
                        {
                            "name": "album",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "album",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgClass"
                },
                {
                    "name": "NgForOf"
                },
                {
                    "name": "NgStyle"
                },
                {
                    "name": "NgIf"
                },
                {
                    "name": "OnCreate"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, Inject, OnInit } from '@angular/core';\nimport { AlbumsService } from '../../../adapters/albums.service';\n\nimport { NgClass, NgForOf, NgStyle, NgIf } from '@angular/common';\nimport { OnCreate } from '../../../directives/onCreate.directive';\n\n@Component({\n  selector: 'wbp-albums',\n  standalone: true,\n  imports: [NgClass, NgForOf, NgStyle, NgIf, OnCreate],\n  templateUrl: './albums.component.html',\n  styleUrl: './albums.component.scss',\n})\nexport class AlbumsComponent implements OnInit {\n  [x: string]: any;\n  albums: any[] = [];\n\n  selectedAlbum!: any;\n  albumSelected: boolean = false;\n\n  constructor(\n    private ref: ElementRef,\n    @Inject(AlbumsService) private albumsService: AlbumsService\n  ) {}\n\n  ngOnInit() {\n    this.albumsService.getAlbums().subscribe((albums) => {\n      this.albums = albums;\n    });\n  }\n\n  setBackgroundImage(album: any): void {\n    console.log(album);\n    this.ref.nativeElement.style.backgroundImage = `url('assets/images/${album.images[0].src}')`;\n  }\n\n  titleAlignment(album: any): string {\n    return album.alignment === 'right' ? 'right' : 'left';\n  }\n\n  titleColor(album: any): string {\n    return album.albumColor !== undefined ? album.albumColor : 'white';\n  }\n\n  openAlbum(album: any) {\n    this.selectedAlbum = album;\n    this.albumSelected = true;\n    console.log(this.selectedAlbum);\n  }\n\n  closeAlbum() {\n    this.albumSelected = false;\n    this.selectedAlbum = undefined;\n  }\n}\n",
            "styleUrl": "./albums.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "ref",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "albumsService",
                        "type": "AlbumsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "ref",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "albumsService",
                        "type": "AlbumsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"albums\">\n\n  <div class=\"album-container c-preview\" *ngFor=\"let album of albums\"\n    [ngStyle]=\"{'background-image':'url(assets/images/' + album.images[0].src + ')'}\">\n    <div class=\"album-borders\">\n      <img src=\"assets/images/logos/StampArtwork/BZStamp1.png\" alt=\"\" class=\"belize-stamp\">\n      <div class=\"album-title\" [ngClass]=\"titleAlignment(album)\" [ngStyle]=\"{'color': titleColor(album)}\">''\n        <span class=\"text-line\">{{album.album}}</span>\n      </div>\n    </div>\n  </div>\n\n\n  <div class=\"albumDisplay\" [ngStyle]=\"{'display': albumSelected === false ? 'none' : 'block' }\">\n    <div class=\"albumDisplay__title allura-regular\">{{selectedAlbum?.album}}</div>\n    <div class=\"albumDisplay__description\" *ngIf=\"selectedAlbum?.description\">{{selectedAlbum?.description}}</div>\n    <div class=\"albumDisplay__close\" (click)=\"closeAlbum()\">\n      <i class=\"fas fa-times\"></i>\n    </div>\n    <div class=\"albumDisplay__content\">\n      <img src=\"assets/images/{{image.src}}\" alt=\"\" class=\"albumDisplay__content__image\"\n        *ngFor=\"let image of selectedAlbum?.images\">\n\n    </div>\n  </div>\n\n</div>"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-cecf4548e1c6960b63ec5a46cef719f396e58eb5b3b07f662bbb53708553255e96816b544bee3050978c99935f753120a3796589c3197c47f0630e83d8dc5be7",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "wbp-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'front-end'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "RouterModule",
                    "type": "module"
                },
                {
                    "name": "HomePageComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { RouterModule, RouterOutlet } from '@angular/router';\n\n// Home Page\nimport { HomePageComponent } from './components/sections/home/home-page/home-page.component';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'wbp-root',\n  standalone: true,\n  imports: [CommonModule, RouterModule, HomePageComponent],\n  templateUrl: './app.component.html',\n  styleUrl: './app.component.scss',\n})\nexport class AppComponent {\n  title = 'front-end';\n}\n",
            "styleUrl": "./app.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"sand\"><router-outlet></router-outlet></div>"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-86e2311c54fbca7431c12e070d0fd5b0ebe343eec0553a392f182ba0e04a8f86613233d26ee47718fd0e7a65078f580c76a1fcc928ce55de81193d6618025bc4",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 798,
                            "end": 811,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 799,
                                "end": 807,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 43,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the page?\n",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 23,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 35,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 49,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  standalone: true,\n  imports: [CommonModule],\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 51
                    }
                }
            }
        },
        {
            "name": "CarouselComponent",
            "id": "component-CarouselComponent-9b466fa4ff2ab3dd2bd4cc3d9f8edf1db64c5c0293398288f4fa212667e716982dddcdbc97002b6bf82956a71e188f2a7798573905490cafd3a2f4f35184cb92",
            "file": "src/app/components/page-elements/carousel/carousel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "wbp-carousel",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./carousel.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "c",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "lastSlide",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "n",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "p",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "slideLen",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "slides",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "animateCallout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "nextSlide",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "populateCallout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "prevSlide",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetCallout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateSlides",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, ElementRef, Inject, OnInit } from '@angular/core';\nimport { CarouselService } from '../../../adapters/carousel.service';\n\n@Component({\n  selector: 'wbp-carousel',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './carousel.component.html',\n  styleUrl: './carousel.component.scss',\n})\nexport class CarouselComponent implements OnInit {\n  slides: any[] = [];\n\n  p!: number;\n  c: number = 0;\n  n: number = 1;\n\n  slideLen!: number;\n  lastSlide!: number;\n\n  constructor(\n    private ref: ElementRef,\n    @Inject(CarouselService) private CarouselService: CarouselService\n  ) {}\n\n  ngOnInit() {\n    this.CarouselService.getSlides().subscribe((slides) => {\n      this.slides = slides;\n\n      this.slideLen = this.slides?.length;\n      this.lastSlide = this.slideLen;\n      this.p = this.lastSlide - 1;\n      this.updateSlides();\n    });\n  }\n\n  async updateSlides() {\n    this.resetCallout();\n    if (\n      this.slides[this.p]?.src !== undefined &&\n      this.slides[this.p]?.src !== null\n    ) {\n      this.ref.nativeElement.style.setProperty(\n        '--prev',\n        this.slides[this.p].src\n      );\n    } else {\n      this.ref.nativeElement.style.setProperty('--prev', this.slides[0].src);\n    }\n\n    if (\n      this.slides[this.c]?.src !== undefined &&\n      this.slides[this.c]?.src !== null\n    ) {\n      this.ref.nativeElement.style.setProperty(\n        '--curr',\n        this.slides[this.c].src\n      );\n    } else {\n      this.ref.nativeElement.style.setProperty('--curr', this.slides[0].src);\n    }\n\n    if (\n      this.slides[this.n]?.src !== undefined &&\n      this.slides[this.n]?.src !== null\n    ) {\n      this.ref.nativeElement.style.setProperty(\n        '--next',\n        this.slides[this.n].src\n      );\n    } else {\n      this.ref.nativeElement.style.setProperty('--curr', this.slides[0].src);\n    }\n\n    // await this.populateCallout();\n\n    // await this.animateCallout();\n  }\n\n  resetCallout() {}\n\n  populateCallout() {}\n\n  animateCallout() {}\n\n  prevSlide() {\n    this.n = this.c;\n    this.c = this.p;\n    this.p === 0 ? (this.p = this.lastSlide) : (this.p = this.p - 1);\n    this.updateSlides();\n  }\n\n  nextSlide() {\n    this.p = this.c;\n    this.c = this.n;\n    this.n === this.lastSlide ? (this.n = 0) : (this.n = this.n + 1);\n    this.updateSlides();\n  }\n}\n",
            "styleUrl": "./carousel.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "ref",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "CarouselService",
                        "type": "CarouselService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "ref",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "CarouselService",
                        "type": "CarouselService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<header>\n <div id=\"prev\" class=\"header-image-container header-image-hidden\"></div>\n\n <div id=\"curr\" class=\"header-image-container header-displayed\">\n  <div id=\"prev-slide\" class=\"carousel-control slide-prev\" (click)=\"prevSlide()\">\n   <img src=\"assets/images/arrow-left.png\" alt=\"\" class=\"carousel-control\" />\n  </div>\n\n\n  <div id=\"typing-text\"></div>\n  <!-- <div id=\"slide-animation\">\n   <div id=\"slide-animation-content\">\n    <h1 id=\"slide-animation-title\"></h1>\n    <div id=\"slide-animation-body\"></div>\n   </div>\n  </div> -->\n\n  <div id=\"next-slide\" class=\"carousel-control slide-next\" (click)=\"nextSlide()\">\n   <img src=\"assets/images/arrow-right.png\" alt=\"\" class=\"carousel-control\" />\n  </div>\n </div>\n\n <div id=\"next\" class=\"header-image-container header-image-hidden\"></div>\n</header>"
        },
        {
            "name": "FooterComponent",
            "id": "component-FooterComponent-3366708036ec99fb24a453f2b59e09adbe584b8cd7cfc41c7553391418ae03b5b7e4a1d92b1747fcd4bacf9f4a3dd96909ae0d4eedfee15685a1024f2e5d6b18",
            "file": "src/app/components/layout/footer/footer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "wbp-footer",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./footer.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'wbp-footer',\n  standalone: true,\n  imports: [],\n  templateUrl: './footer.component.html',\n  styleUrl: './footer.component.scss'\n})\nexport class FooterComponent {\n\n}\n",
            "styleUrl": "./footer.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<footer class=\"footer mt-4 text-bg-dark py-5\">\n <div class=\"container\">\n  <div class=\"row\">\n   <div class=\"col-md-4\">\n    <h5>Lorem Ipsum</h5>\n    <p>\n     Lorem ipsum dolor sit amet consectetur, adipisicing elit. Eos\n     possimus aliquid omnis commodi. Dignissimos, quam obcaecati? Fugit\n     non ex repellendus?\n    </p>\n   </div>\n   <div class=\"col-md-4\">\n    <h3>Quick Links</h3>\n    <ul class=\"list-unstyled\">\n     <li><a href=\"#home\">Home</a></li>\n     <li><a href=\"#discover\">Discover</a></li>\n     <li><a href=\"#summary\">Summary</a></li>\n     <li><a href=\"#takeaways\">Takeaways</a></li>\n     <li><a href=\"#subscribe\">Subscribe</a></li>\n    </ul>\n   </div>\n   <div class=\"col-md-4\">\n    <h5>Connect</h5>\n    <div class=\"d-flex gap-3\">\n     <a href=\"#\"><i class=\"fab fa-facebook fa-3x text-white\"></i></a>\n     <a href=\"#\"><i class=\"fab fa-twitter fa-3x text-white\"></i></a>\n     <a href=\"#\"><i class=\"fab fa-linkedin fa-3x text-white\"></i></a>\n     <a href=\"#\"><i class=\"fab fa-instagram fa-3x text-white\"></i></a>\n     <a href=\"#\"><i class=\"fab fa-youtube fa-3x text-white\"></i></a>\n    </div>\n   </div>\n  </div>\n </div>\n</footer>"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-cad94b233ec8e80ceb541e7972c5f9737e08237b4e137112f3987ca48ee0cce5c0d57798d41daa5d4d24d6bdbb2df1606ab68cca2aa0a1785e38f99f3cac0729",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"storybook-header\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            [primary]=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 78,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ButtonComponent } from './button.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-header',\n  standalone: true,\n  imports: [CommonModule, ButtonComponent],\n  template: `<header>\n    <div class=\"storybook-header\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            [primary]=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-header {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\n.storybook-header svg {\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-header h1 {\n  font-weight: 700;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-header button + button {\n  margin-left: 10px;\n}\n\n.storybook-header .welcome {\n  color: #333;\n  font-size: 14px;\n  margin-right: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "HomePageComponent",
            "id": "component-HomePageComponent-136ef3c8d07b8a29445cc722ad5a036510f8de542c4dccddc70233e663668cfd5a13b0f779e958ff7da900da9b152bcaca4c71583178cba333add7afaedaac50",
            "file": "src/app/components/sections/home/home-page/home-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "wbp-home-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./home-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NavBarComponent",
                    "type": "component"
                },
                {
                    "name": "FooterComponent",
                    "type": "component"
                },
                {
                    "name": "CarouselComponent",
                    "type": "component"
                },
                {
                    "name": "WillsBioComponent",
                    "type": "component"
                },
                {
                    "name": "AlbumsComponent",
                    "type": "component"
                },
                {
                    "name": "WeatherComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n// Layout Components\nimport { NavBarComponent } from '../../../layout/nav-bar/nav-bar.component';\nimport { FooterComponent } from '../../../layout/footer/footer.component';\n\n//Page Elemeents Components\nimport { CarouselComponent } from '../../../page-elements/carousel/carousel.component';\nimport { WillsBioComponent } from '../../../page-elements/wills-bio/wills-bio.component';\nimport { AlbumsComponent } from '../../../page-elements/albums/albums.component';\nimport { WeatherComponent } from '../../../page-elements/weather/weather.component';\n@Component({\n  selector: 'wbp-home-page',\n  standalone: true,\n  imports: [\n    NavBarComponent,\n    FooterComponent,\n    CarouselComponent,\n    WillsBioComponent,\n    AlbumsComponent,\n    WeatherComponent,\n  ],\n  templateUrl: './home-page.component.html',\n  styleUrl: './home-page.component.scss',\n})\nexport class HomePageComponent {}\n",
            "styleUrl": "./home-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<wbp-nav-bar></wbp-nav-bar>\n<wbp-carousel></wbp-carousel>\n<wbp-wills-bio></wbp-wills-bio>\n<wbp-albums></wbp-albums>\n<wbp-weather></wbp-weather>\n<wbp-footer></wbp-footer>"
        },
        {
            "name": "ImageUploadComponent",
            "id": "component-ImageUploadComponent-2672e9ef8cd273a45b4f3deb1ee83dfaee50eaa2564faed59a47c3bf04eefbd6b58964a755b4861b7e7176c9456d76ab72d38fa7400456f541749355f08c994a",
            "file": "src/app/components/page-elements/admin/images/upload/image-upload.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "MessageService",
                    "type": "injectable"
                },
                {
                    "name": "FilterService",
                    "type": "injectable"
                },
                {
                    "name": "TagService",
                    "type": "injectable"
                }
            ],
            "selector": "wbp-image-upload",
            "styleUrls": [
                "./image-upload.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./image-upload.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "badgeSeverity",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 93
                },
                {
                    "name": "badgeValue",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 92
                },
                {
                    "name": "currentFile",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "File",
                    "optional": true,
                    "description": "",
                    "line": 81
                },
                {
                    "name": "currentImageId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 78
                },
                {
                    "name": "editmode",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "endsubs$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<any>",
                    "optional": false,
                    "description": "",
                    "line": 79
                },
                {
                    "name": "fileInfos",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<any>",
                    "optional": true,
                    "description": "",
                    "line": 84
                },
                {
                    "name": "files",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 86
                },
                {
                    "name": "filteredTags",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 89
                },
                {
                    "name": "imageForm",
                    "defaultValue": "new FormGroup({\n    title: new FormControl('', Validators.required),\n    description: new FormControl(''),\n    caption: new FormControl(''),\n    comments: new FormControl(''),\n    dateTaken: new FormControl(''),\n    tags: new FormControl('', Validators.required),\n    image: new FormControl<File | null>(null, Validators.required),\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "imagePreview",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | ArrayBuffer | null | undefined",
                    "optional": false,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "isSubmitted",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "message",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 83
                },
                {
                    "name": "newTag",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLInputElement>",
                    "optional": false,
                    "description": "",
                    "line": 97,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'newTag', {static: false}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "progress",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 82
                },
                {
                    "name": "selectedTags",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 90
                },
                {
                    "name": "tagsLookup",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 88
                },
                {
                    "name": "uploadDisabled",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 95
                },
                {
                    "name": "uploadedFiles",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 64
                }
            ],
            "methodsClass": [
                {
                    "name": "_addImage",
                    "args": [
                        {
                            "name": "imageData",
                            "type": "FormData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 328,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "imageData",
                            "type": "FormData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_addTagToForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 182,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "_getTags",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 163,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_setBadgeSettings",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_updateImage",
                    "args": [
                        {
                            "name": "imageData",
                            "type": "FormData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 355,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "imageData",
                            "type": "FormData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addNewTag",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 193,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "checkEditMode",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 155,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "deSelectTag",
                    "args": [
                        {
                            "name": "selectedTag",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 248,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "selectedTag",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "formatBytes",
                    "args": [
                        {
                            "name": "bytes",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "decimals",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "2"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 387,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nformat bytes\n",
                    "description": "<p>format bytes</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 9701,
                                "end": 9706,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "bytes"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 9695,
                                "end": 9700,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>(File size in bytes)</p>\n"
                        },
                        {
                            "name": {
                                "pos": 9740,
                                "end": 9748,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "decimals"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "2",
                            "tagName": {
                                "pos": 9734,
                                "end": 9739,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>(Decimals point)</p>\n"
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onCancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 324,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onImagePicked",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 279,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 301,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectTag",
                    "args": [
                        {
                            "name": "selectedTag",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 216,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "selectedTag",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "CardModule",
                    "type": "module"
                },
                {
                    "name": "ToolbarModule",
                    "type": "module"
                },
                {
                    "name": "ButtonModule",
                    "type": "module"
                },
                {
                    "name": "CalendarModule",
                    "type": "module"
                },
                {
                    "name": "InputTextModule",
                    "type": "module"
                },
                {
                    "name": "ToastModule",
                    "type": "module"
                },
                {
                    "name": "FileUploadModule",
                    "type": "module"
                },
                {
                    "name": "TagModule",
                    "type": "module"
                },
                {
                    "name": "BadgeModule",
                    "type": "module"
                },
                {
                    "name": "ProgressComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  Inject,\n  Input,\n  OnInit,\n  ElementRef,\n  ViewChild,\n} from '@angular/core';\n\nimport { CommonModule, Location } from '@angular/common';\n\nimport { Observable, Subject, takeUntil, timer } from 'rxjs';\n\nimport { orderBy } from 'lodash';\n\nimport { FormControl, ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { FormGroup, Validators } from '@angular/forms';\n\nimport { TagService } from '@adapters/tag.service';\nimport { ImageService } from '@adapters/image.service';\n\nimport { Image } from '@interfaces/image.interface';\nimport { Tag } from '@interfaces/tag.interface';\n\nimport { MessageService, FilterService, PrimeNGConfig } from 'primeng/api';\nimport { CardModule } from 'primeng/card';\nimport { ToolbarModule } from 'primeng/toolbar';\nimport { ButtonModule } from 'primeng/button';\nimport { CalendarModule } from 'primeng/calendar';\nimport { InputTextModule } from 'primeng/inputtext';\nimport { ToastModule } from 'primeng/toast';\nimport { FileUploadModule } from 'primeng/fileupload';\nimport { TagModule } from 'primeng/tag';\nimport { BadgeModule } from 'primeng/badge';\nimport { ProgressComponent } from './progress/progress.component';\n\n@Component({\n  selector: 'wbp-image-upload',\n  standalone: true,\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    CardModule,\n    ToolbarModule,\n    ButtonModule,\n    CalendarModule,\n    InputTextModule,\n    ToastModule,\n    FileUploadModule,\n    TagModule,\n    BadgeModule,\n    ProgressComponent,\n  ],\n\n  providers: [MessageService, FilterService, TagService],\n  templateUrl: './image-upload.component.html',\n  styleUrls: ['./image-upload.component.scss'],\n})\nexport class ImageUploadComponent implements OnInit {\n  editmode: boolean = false;\n  isSubmitted: boolean = false;\n\n  uploadedFiles: any[] = [];\n\n  imageForm: FormGroup = new FormGroup({\n    title: new FormControl('', Validators.required),\n    description: new FormControl(''),\n    caption: new FormControl(''),\n    comments: new FormControl(''),\n    dateTaken: new FormControl(''),\n    tags: new FormControl('', Validators.required),\n    image: new FormControl<File | null>(null, Validators.required),\n  });\n  @Input() id!: string;\n\n  imagePreview!: string | ArrayBuffer | null | undefined;\n  currentImageId!: number;\n  endsubs$: Subject<any> = new Subject();\n\n  currentFile?: File;\n  progress = 0;\n  message = '';\n  fileInfos?: Observable<any>;\n\n  files: any[] = [];\n\n  tagsLookup: { [key: string]: Tag } = {};\n  filteredTags: any[] = [];\n  selectedTags: any[] = [];\n\n  badgeValue: any = {};\n  badgeSeverity: any = {};\n\n  uploadDisabled: boolean = true;\n\n  @ViewChild('newTag', { static: false }) newTag!: ElementRef<HTMLInputElement>;\n\n  constructor(\n    private primengConfig: PrimeNGConfig,\n    private location: Location,\n    private messageService: MessageService,\n    private filterService: FilterService,\n    @Inject(ImageService) private imageService: ImageService,\n    @Inject(TagService) private tagService: TagService\n  ) {}\n\n  ngOnInit() {\n    this.primengConfig.ripple = true;\n\n    this.primengConfig.zIndex = {\n      modal: 1100, // dialog, sidebar\n      overlay: 1000, // dropdown, overlaypanel\n      menu: 1000, // overlay menus\n      tooltip: 1100, // tooltip\n    };\n\n    this._getTags();\n\n    this.fileInfos = this.imageService.getImages();\n\n    this.checkEditMode();\n\n    this.imageForm.get('image')?.valueChanges.subscribe((value) => {\n      if (value) {\n        this.uploadDisabled = false;\n      } else {\n        this.uploadDisabled = true;\n      }\n    });\n  }\n\n  private _setBadgeSettings() {\n    for (let tag in this.tagsLookup) {\n      if (\n        this.tagsLookup[tag] !== undefined ||\n        (null && this.tagsLookup[tag]['count'] !== undefined) ||\n        null\n      ) {\n        const tagCount = this.tagsLookup[tag]['count'] || 0;\n        this.badgeValue[this.tagsLookup[tag].tag] = this.tagsLookup[tag].count;\n        if (tagCount > 30) {\n          this.badgeSeverity[this.tagsLookup[tag].tag] = 'danger';\n        } else if (tagCount > 20) {\n          this.badgeSeverity[this.tagsLookup[tag].tag] = 'warning';\n        } else if (tagCount > 10) {\n          this.badgeSeverity[tag] = 'info';\n        } else {\n          this.badgeSeverity[tag] = 'success';\n        }\n      }\n    }\n  }\n\n  checkEditMode() {\n    if (this.id !== null && this.id !== undefined) {\n      this.editmode = true;\n    } else {\n      this.editmode = false;\n    }\n  }\n\n  private _getTags() {\n    this.tagService.getTags().subscribe((tags: Array<Tag>) => {\n      tags.forEach((tag: Tag) => {\n        const resultTag = {\n          tag: tag.tag,\n          _id: tag._id,\n          id: tag.id,\n          description: tag.description,\n          count: tag.count,\n        };\n        this.tagsLookup[tag['tag']] = resultTag;\n\n        this.filteredTags.push(resultTag);\n      });\n\n      this._setBadgeSettings();\n    });\n  }\n\n  _addTagToForm() {\n    let tags: string[] = [];\n    this.selectedTags.forEach((tag: Tag) => {\n      tags.push(tag.tag);\n    });\n\n    const tagIdList = this.selectedTags.map((tag: Tag) => tag._id).join(',');\n\n    this.imageForm.patchValue({ tags: tagIdList });\n  }\n\n  addNewTag(event: any) {\n    const value = event.value;\n    this.tagService.addTag(value).subscribe((result: any) => {\n      const resultTag = {\n        tag: value,\n        _id: result._id,\n        id: result.id,\n        count: 0,\n      };\n      this.tagsLookup[value] = resultTag;\n      this.filteredTags.push(resultTag);\n\n      this.filteredTags = orderBy(\n        this.filteredTags,\n        ['count', 'tag'],\n        ['desc', 'asc']\n      );\n\n      this.newTag.nativeElement.value = '';\n      this._setBadgeSettings();\n    });\n  }\n\n  selectTag(selectedTag: string) {\n    this.selectedTags.push(this.tagsLookup[selectedTag]);\n    this.selectedTags = orderBy(\n      this.selectedTags,\n      ['count', 'tag'],\n      ['desc', 'asc']\n    );\n    this.selectedTags = orderBy(\n      this.selectedTags,\n      ['count', 'tag'],\n      ['desc', 'asc']\n    );\n\n    const tempTags = [...this.filteredTags];\n    const newFilteredTags: any[] = [];\n\n    tempTags.forEach((tag: Tag) => {\n      if (tag.tag !== selectedTag) {\n        newFilteredTags.push(tag);\n      }\n    });\n\n    this.filteredTags = orderBy(\n      newFilteredTags,\n      ['count', 'tag'],\n      ['desc', 'asc']\n    );\n\n    this._addTagToForm();\n    this._setBadgeSettings();\n  }\n\n  deSelectTag(selectedTag: string) {\n    const tempTags = [...this.selectedTags];\n    const newSelectedTags: any[] = [];\n\n    tempTags.forEach((tag: Tag) => {\n      if (tag.tag !== selectedTag) {\n        newSelectedTags.push(tag);\n      }\n    });\n\n    this.selectedTags = orderBy(\n      newSelectedTags,\n      ['count', 'tag'],\n      ['desc', 'asc']\n    );\n\n    this.filteredTags.push(this.tagsLookup[selectedTag]);\n    this.filteredTags = orderBy(\n      this.filteredTags,\n      ['count', 'tag'],\n      ['desc', 'asc']\n    );\n    this.filteredTags = orderBy(\n      this.filteredTags,\n      ['count', 'tag'],\n      ['desc', 'asc']\n    );\n\n    this._setBadgeSettings();\n  }\n\n  onImagePicked(event: Event) {\n    const element = event.target as HTMLInputElement;\n    let file;\n    if (element === null || element.files === null) {\n      return;\n    } else {\n      file = element.files[0];\n    }\n    this.imageForm.patchValue({ image: file });\n    if (\n      this.imageFormC !== undefined &&\n      this.imageFormC['image'] !== undefined\n    ) {\n      this.imageFormC['image'].updateValueAndValidity();\n    }\n    const reader = new FileReader();\n    reader.onload = () => {\n      this.imagePreview = reader.result as string;\n    };\n    reader.readAsDataURL(file);\n  }\n\n  onSubmit() {\n    if (this.imageForm.invalid) return;\n\n    //this.isLoading = true;\n    let skippedFields = ['tags'];\n    let imageFormData: FormData = new FormData();\n    for (const field in this.imageForm.controls) {\n      if (\n        this.imageForm.controls.hasOwnProperty(field) &&\n        !skippedFields.includes(field)\n      ) {\n        imageFormData.append(field, this.imageForm.get(field)?.value);\n      }\n    }\n\n    if (this.editmode === false) {\n      this.imageService.addImage(imageFormData);\n    } else {\n      this.imageService.updatePost(this.id, imageFormData);\n    }\n    this.imageForm.reset();\n  }\n\n  onCancel() {\n    this.location.back();\n  }\n\n  private _addImage(imageData: FormData) {\n    this.imageService\n      .createImage(imageData)\n      .pipe(takeUntil(this.endsubs$))\n      .subscribe({\n        complete: () => {\n          this.messageService.add({\n            severity: 'success',\n            summary: 'Success',\n            detail: `Image is created!`,\n          });\n          timer(2000)\n            .toPromise()\n            .then(() => {\n              this.location.back();\n            });\n        },\n        error: (error) => {\n          this.messageService.add({\n            severity: 'error',\n            summary: 'Error',\n            detail: 'Image is not created!',\n          });\n        },\n      });\n  }\n\n  private _updateImage(imageData: FormData) {\n    this.imageService\n      .updateImage(imageData, this.id)\n      .pipe(takeUntil(this.endsubs$))\n      .subscribe(\n        () => {\n          this.messageService.add({\n            severity: 'success',\n            summary: 'Success',\n            detail: 'Image is updated!',\n          });\n          timer(2000)\n            .toPromise()\n            .then(() => {\n              this.location.back();\n            });\n        },\n        () => {\n          this.messageService.add({\n            severity: 'error',\n            summary: 'Error',\n            detail: 'Image is not updated!',\n          });\n        }\n      );\n  }\n\n  /**\n   * format bytes\n   * @param bytes (File size in bytes)\n   * @param decimals (Decimals point)\n   */\n  formatBytes(bytes: number, decimals: number = 2): string {\n    if (bytes === 0) {\n      return '0 Bytes';\n    }\n    const k = 1024;\n    const dm = decimals <= 0 ? 0 : decimals || 2;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n  }\n\n  get imageFormC() {\n    return this.imageForm.controls;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../assets/scss/1-abstracts/variables';\n\n:host ::ng-deep {\n & .p-autocomplete {\n  display: inline-block;\n  width: 100% !important;\n\n  &-input {\n   display: block;\n   width: 100% !important;\n  }\n }\n\n & label {\n  display: inline-block;\n  margin-top: 6px;\n  margin-bottom: 2px;\n  font-weight: 600;\n }\n\n & .label.calendar-label {\n  display: block;\n }\n\n & .label.image-label {\n  display: block;\n }\n\n}\n\n.field-border {\n border: 1px solid #d9d9d9;\n border-radius: 4px;\n width: 100%;\n}\n\n.tag-field {\n min-height: 28px;\n}\n\n.preview-image {\n height: 300px;\n}\n\ninput[type=\"file\"] {\n visibility: hidden;\n}\n\n.image-preview {\n height: 5rem;\n margin: 1rem 0;\n}\n\n.image-preview img {\n height: 100%;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// here",
                    "styleUrl": "./image-upload.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "primengConfig",
                        "type": "PrimeNGConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messageService",
                        "type": "MessageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "filterService",
                        "type": "FilterService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "imageService",
                        "type": "ImageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "tagService",
                        "type": "TagService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 97,
                "jsdoctags": [
                    {
                        "name": "primengConfig",
                        "type": "PrimeNGConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messageService",
                        "type": "MessageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "filterService",
                        "type": "FilterService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "imageService",
                        "type": "ImageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "tagService",
                        "type": "TagService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "imageFormC": {
                    "name": "imageFormC",
                    "getSignature": {
                        "name": "imageFormC",
                        "type": "",
                        "returnType": "",
                        "line": 398
                    }
                }
            },
            "templateData": "<!-- Flexbox container for aligning the toasts -->\n<p-toast></p-toast>\n<div class=\"admin-page\">\n  <p-card class=\"main-card\" [header]=\"editmode ? 'Edit Image' : 'Add Image'\"\n    subheader=\"You can add or edit images here\">\n    <div class=\"grid p-mb-5\">\n      <div class=\"col-12\">\n        <p-toolbar>\n          <div class=\"p-toolbar-group-left\"></div>\n          <div class=\"p-toolbar-group-right\">\n            <p-button styleClass=\"p-button-primary p-mr-2\" [label]=\"editmode ? 'Update' : 'Create'\" icon=\"pi pi-plus\"\n              (click)=\"onSubmit()\"></p-button>\n            <p-button styleClass=\"p-button-secondary\" label=\"Cancel\" icon=\"pi pi-arrow-circle-left\"\n              (click)=\"onCancel()\"></p-button>\n          </div>\n        </p-toolbar>\n      </div>\n    </div>\n    <div class=\"grid\">\n      <div class=\"col-12\">\n        <form [formGroup]=\"imageForm\" (submit)=\"onSubmit()\">\n          <!-- image:  -->\n          <div class=\"grid field-border mt-4\">\n            <div class=\"p-field col-12\">\n              <div>\n                <button class=\"button btn mb-2\" type=\"button\" (click)=\"filePicker.click()\">Pick Image</button>\n                <input type=\"file\" #filePicker (change)=\"onImagePicked($event)\">\n              </div>\n\n              @if (imagePreview) {\n              <div class=\"grid\">\n                <div class=\"p-field col-12\">\n                  <img [src]=\"imagePreview\" alt=\"\" class=\"preview-image\" />\n                </div>\n              </div>\n              }\n              <small *ngIf=\"imageForm.get('image')\n                                              ?.invalid && isSubmitted\" class=\"p-error\">Image is required</small>\n            </div>\n\n          </div>\n          @if (progress || message) {\n          <div class=\"grid\">\n            <div class=\"p-field col-12\">\n              @if (progress) {\n              <div class=\"progress my-3\">\n                <div class=\"progress-bar progress-bar-info\" role=\"progressbar\" attr.aria-valuenow=\"{{ progress }}\"\n                  aria-valuemin=\"0\" aria-valuemax=\"100\" [ngStyle]=\"{ width: progress + '%' }\">\n                  {{ progress }}%\n                </div>\n              </div>\n              }\n\n              @if (message) {\n              <div class=\"alert alert-secondary\" role=\"alert\">{{ message }}</div>\n              }\n            </div>\n          </div>\n          }\n\n          <!-- tags:  -->\n          <div class=\"grid mt-4 \">\n            <div class=\"p-field col-12 md:col-5\">\n              <label class=\"label\" for=\"tags\" style=\"margin-bottom: 6px;\">Tags</label>\n              <div class=\"grid mb-4\">\n                <div class=\"p-field col-12 md:col-5 field-border tag-field\" id=\"selected-tags\">\n                  @if (selectedTags && selectedTags.length > 0) {\n                  <button *ngFor=\"let tag of selectedTags\" class=\"pill selected-pill\" role=\"button\"\n                    (click)=\"deSelectTag(tag['tag'])\"><i class=\"pi pi-times mr-2\"></i>\n                    {{tag['tag']}} <p-badge [value]=\"badgeValue[tag.tag]\" [severity]=\"badgeSeverity[tag.tag]\"\n                      severity=\"success\"></p-badge></button>\n                  }\n                </div>\n              </div>\n\n              <div class=\"grid mb-4\">\n                <div class=\"p-field col-12 md:col-5 field-border tag-field\" id=\"tag-list\">\n                  @if (filteredTags && filteredTags.length > 0) {\n                  <button *ngFor=\"let tag of filteredTags\" class=\"pill\" role=\"button\" (click)=\"selectTag(tag['tag'])\">\n                    {{tag.tag}}<p-badge [value]=\"badgeValue[tag.tag]\" [severity]=\"badgeSeverity[tag.tag]\"\n                      severity=\"success\"></p-badge></button>\n                  }\n                </div>\n              </div>\n\n              <div class=\"grid mb-4\">\n                <div class=\"p-field col-12 md:col-5 field-border tag-field\" id=\"selected-tags\">\n                  <input type=\"text\" class=\"new-tag mr-2\" #newTag><button class=\"button\" role=\"button\"\n                    (click)=\"addNewTag(newTag)\">Add\n                    Tag</button>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <!-- dateTaken -->\n          <div class=\"grid\">\n            <div class=\"p-field col-12 md:col-5\">\n              <label class=\"label calendar-label\" for=\"dateTaken\">Date Taken</label>\n              <p-calendar formControlName=\"dateTaken\" id=\"dateTaken\" inputId=\"dateTaken\" showButtonBar=\"true\"\n                dateFormat=\"yy-mm-dd\" inline=\"false\" [showIcon]=\"true\" showButtonBar=\"true\" [showIcon]=\"true\"\n                [firstDayOfWeek]=\"1\" [monthNavigator]=\"true\" [yearNavigator]=\"true\" [numberOfMonths]=\"1\"\n                selectOtherMonths=\"true\" field=\"name\" />\n            </div>\n          </div>\n          <!-- title -->\n          <div class=\"grid\">\n            <div class=\"p-field col-12 md:col-5\">\n              <label class=\"label\" for=\"title\">Title<span class=\"required\">*</span></label>\n              <input formControlName=\"title\" id=\"title\" type=\"text\" class=\"inputfield w-full\" pInputText />\n              <small *ngIf=\"imageForm.get('title')?.invalid && isSubmitted\" class=\"p-error\">Title is required</small>\n            </div>\n          </div>\n          <!-- description -->\n          <div class=\"grid\">\n            <div class=\"p-field col-12 md:col-5\">\n              <label class=\"label\" for=\"description\">Description</label>\n              <input formControlName=\"description\" id=\"description\" type=\"text\" class=\"inputfield w-full\" pInputText />\n            </div>\n          </div>\n          <!-- caption -->\n          <div class=\"grid\">\n            <div class=\"p-field col-12 md:col-5\">\n              <label class=\"label\" for=\"caption\">Caption</label>\n              <input formControlName=\"caption\" id=\"caption\" type=\"text\" class=\"inputfield w-full\" pInputText />\n            </div>\n          </div>\n          <!-- comments -->\n          <div class=\"grid\">\n            <div class=\"p-field col-12 md:col-5\">\n              <label class=\"label\" for=\"comments\">Comments</label>\n              <input formControlName=\"comments\" id=\"comments\" type=\"text\" class=\"inputfield w-full\" pInputText />\n            </div>\n          </div>\n\n        </form>\n      </div>\n    </div>\n  </p-card>\n</div>"
        },
        {
            "name": "NavBarComponent",
            "id": "component-NavBarComponent-10e0cd40f8c1edcc7acf3e989f4450d6348095d9bd59aa70a1dd8e1d7b50d1715d249542a0b97519c2055d3a2166c8c8b51011569127a085acdd2ff6eaad1953",
            "file": "src/app/components/layout/nav-bar/nav-bar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "wbp-nav-bar",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./nav-bar.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'wbp-nav-bar',\n  standalone: true,\n  imports: [],\n  templateUrl: './nav-bar.component.html',\n  styleUrl: './nav-bar.component.scss',\n})\nexport class NavBarComponent {}\n",
            "styleUrl": "./nav-bar.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<!-- Navbar -->\n<nav class=\"navbar navbar-expand-lg fixed-top nav-animation\">\n <div class=\"container\">\n  <a href=\"index.html\" class=\"navbar-brand\">\n   <img src=\"assets/images/logos/spherebluelogoOval2.png\" alt=\"Will Blochinger Photography Logo\" class=\"navbar__logo\" />\n  </a>\n  <button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarNavDropdown\"\n   aria-controls=\"navbarNavDropdown\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n   <span class=\"navbar-toggler-icon\"></span>\n  </button>\n  <div class=\"collapse navbar-collapse\" id=\"navbarNavDropdown\">\n   <ul class=\"navbar-nav ms-auto\">\n    <li class=\"nav-item\">\n     <a class=\"nav-link\" href=\"#discover\">Gallery</a>\n    </li>\n    <li class=\"nav-item\">\n     <a class=\"nav-link\" href=\"#summary\">Packages</a>\n    </li>\n    <li class=\"nav-item\">\n     <a class=\"nav-link\" href=\"#takeaways\">Info</a>\n    </li>\n    <li class=\"nav-item\">\n     <a class=\"nav-link\" href=\"#takeaways\">Belize</a>\n    </li>\n    <li class=\"nav-item\">\n     <a class=\"nav-link\" href=\"#takeaways\">Store</a>\n    </li>\n    <li class=\"nav-item\">\n     <a class=\"nav-link\" href=\"#subscribe\">Contact</a>\n    </li>\n    <li class=\"nav-item\">\n     <a class=\"nav-link\" href=\"#subscribe\"><i class=\"fa-solid fa-user\"></i></a>\n    </li>\n\n   </ul>\n   <!--           <span class=\"nav-item\">\n            <span class=\"fa-stack\">\n              <a href=\"#\">\n                <i class=\"fas fa-circle fa-stack-2x\"></i>\n                <i class=\"fab fa-facebook-f fa-stack-1x text-white\"></i>\n              </a>\n            </span>\n          </span>\n          <span class=\"nav-item\">\n            <span class=\"fa-stack\">\n              <a href=\"#\">\n                <i class=\"fas fa-circle fa-stack-2x\"></i>\n                <i class=\"fab fa-twitter fa-stack-1x text-white\"></i>\n              </a>\n            </span>\n          </span> -->\n  </div>\n </div>\n</nav>"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-d32b0f19628254ea3fc5526c4d4564ada1cc83cf936759006d90a46f5874b02a3359e331bddda20b22e74a616a6443c660602ba74dd38ebe1160759e0de6f7ba",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section class=\"storybook-page\">\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 69
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "HeaderComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { HeaderComponent } from './header.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-page',\n  standalone: true,\n  imports: [CommonModule, HeaderComponent],\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section class=\"storybook-page\">\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-page {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\n.storybook-page h2 {\n  font-weight: 700;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-page p {\n  margin: 1em 0;\n}\n\n.storybook-page a {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\n.storybook-page ul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\n.storybook-page li {\n  margin-bottom: 8px;\n}\n\n.storybook-page .tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.storybook-page .tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.storybook-page .tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.storybook-page .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "ProgressComponent",
            "id": "component-ProgressComponent-fcb5b3d2751f77f17df228cd3f9c0fb97f1094b0f7f922ae3111c5df864ce5cc5e8d017fa526ceb2befde3637fcbe1964c31ae2b3f4e6d625128a5f573e3c3c3",
            "file": "src/app/components/page-elements/admin/images/upload/progress/progress.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "wbp-progress",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./progress.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "progress",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'wbp-progress',\n  standalone: true,\n  imports: [],\n  templateUrl: './progress.component.html',\n  styleUrl: './progress.component.scss',\n})\nexport class ProgressComponent implements OnInit {\n  @Input() progress = 0;\n  constructor() {}\n\n  ngOnInit() {}\n}\n",
            "styleUrl": "./progress.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"progress-cont\">\n <div class=\"progress\" [style.width]=\"progress + '%'\">\n </div>\n</div>"
        },
        {
            "name": "WeatherComponent",
            "id": "component-WeatherComponent-adb6b61c3362d3d7827d695bc8c3116c418c44a4bb9ab29c35f74b17b993a3011c9c101f6afcf85d6dc097e799e77d0adaf79113bef110985156f89f6a50172a",
            "file": "src/app/components/page-elements/weather/weather.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "wbp-weather",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./weather.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject, OnInit } from '@angular/core';\nimport { WeatherService } from '../../../adapters/weather.service';\n\n@Component({\n  selector: 'wbp-weather',\n  standalone: true,\n  imports: [],\n  templateUrl: './weather.component.html',\n  styleUrl: './weather.component.scss',\n})\nexport class WeatherComponent implements OnInit {\n  constructor(private weatherService: WeatherService) {}\n\n  ngOnInit() {\n    /*  this.weatherService.getWeather().subscribe((weather: any) => {\n      console.log(weather);\n    });\n    this.weatherService.getMarine().subscribe((marineData: any) => {\n      console.log(marineData);\n    });\n    this.weatherService.getAstro().subscribe((astroData: any) => {\n      console.log(astroData);\n    }); */\n    this.weatherService.getMoonPhase().subscribe((moonPhaseData: any) => {\n      console.log(moonPhaseData);\n    });\n  }\n}\n",
            "styleUrl": "./weather.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "weatherService",
                        "type": "WeatherService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "weatherService",
                        "type": "WeatherService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>weather works!</p>\n"
        },
        {
            "name": "WillsBioComponent",
            "id": "component-WillsBioComponent-ccff647a48aefeb63734d0f62a7e8e70ad1f5f652866ae9dbb3ab5cf8fc271287304c668bd811f651e6812569c720a4157e18aa55e28dde0983cb645eccf0275",
            "file": "src/app/components/page-elements/wills-bio/wills-bio.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "wbp-wills-bio",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./wills-bio.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'wbp-wills-bio',\n  standalone: true,\n  imports: [],\n  templateUrl: './wills-bio.component.html',\n  styleUrl: './wills-bio.component.scss'\n})\nexport class WillsBioComponent {\n\n}\n",
            "styleUrl": "./wills-bio.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"will\">\n <div class=\"mug-shot \"><img src=\"assets/images/hs1.jpg\" alt=\"\" class=\"mug\"></div>\n <div class=\"bio\">\n  Will Blochinger has been a universally recognized name in the photography world since he first started capturing\n  images\n  of icons such as Metallica, The Rolling Stones, Snoop Dogg, No Doubt and Cheech & Chong among others, in the\n  mid-nineties. As an acclaimed celebrity photographer, award-winning wedding/portrait photographer and underwater\n  photographer, his love for shooting has changed the face of photography. Will’s passion is about capturing those\n  perfect\n  moments in time along with the quintessential essence of that moment, person, or creature, for those\n  once-in-a-lifetime\n  images. His work helped pioneer the photographic style “Cinematic” due to his extensive celebrity portraiture career,\n  and his ability to fuse that iconic cinema feel with fashion photography and classic portraiture. This is the style of\n  photography that creates the countless beloved moments that his clients cherish and pass on to their children for\n  generations to come. Will’s work has been featured in numerous publications, including Rolling Stone, People, US\n </div>\n</div>"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\n  providers: [\n    {\n      provide: DATE_PIPE_DEFAULT_OPTIONS,\n      useValue: { dateFormat: 'longDate' },\n    },\n    provideHttpClient(),\n    provideAnimationsAsync(),\n    provideRouter(\n      routes,\n      withPreloading(PreloadAllModules),\n      // withDebugTracing(),\n      withViewTransitions()\n    ),\n  ],\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  baseAPIUrl: 'http://localhost:3000',\n  API: '/api',\n}"
            },
            {
                "name": "homeSlide",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/assets/json/slides.data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  src: 'url(assets/images/--155-Edit-Edit.jpg)',\n  alt: 'photo 1',\n  slider: {\n    width: 0,\n    height: '',\n    sliderClass: 'coral',\n    header: 'Wedding Photography',\n    headerColor: '',\n    subHeader: '',\n    subHeaderColor: '',\n    content:\n      \"Professional wedding photography is an art form that goes beyond capturing moments; it encapsulates emotions, stories, and the essence of one of the most significant days in a couple's life. It involves a delicate balance of technical expertise, creativity, and interpersonal skills to deliver timeless images that evoke nostalgia and joy for years to come.        \",\n    contentColor: '',\n    origin: '-350 250 0 0',\n    destination: '100 350 0 0',\n  },\n}"
            },
            {
                "name": "mimeType",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/page-elements/admin/images/upload/mime-type.validator.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(\n  control: AbstractControl\n): Promise<{ [key: string]: any }> | Observable<{ [key: string]: any } | null> => {\n  if (typeof control.value === 'string') {\n    return of(null);\n  }\n  const file = control.value as File;\n  const fileReader = new FileReader();\n  const frObs = Observable.create(\n    (observer: Observer<{ [key: string]: any }> | null) => {\n      fileReader.addEventListener('loadend', () => {\n        const arr = new Uint8Array(fileReader.result as ArrayBuffer).subarray(\n          0,\n          4\n        );\n        let header = '';\n        let isValid = false;\n        for (let i = 0; i < arr.length; i++) {\n          header += arr[i].toString(16);\n        }\n        switch (header) {\n          case '89504e47':\n            isValid = true;\n            break;\n          case 'ffd8ffe0':\n          case 'ffd8ffe1':\n          case 'ffd8ffe2':\n          case 'ffd8ffe3':\n          case 'ffd8ffe8':\n            isValid = true;\n            break;\n          default:\n            isValid = false; // Or you can use the blob.type as fallback\n            break;\n        }\n        if (isValid) {\n          observer?.next({});\n        } else {\n          observer?.next({ invalidMimeType: true });\n        }\n        observer?.complete();\n      });\n      fileReader.readAsArrayBuffer(file);\n    }\n  );\n  return frObs;\n}"
            },
            {
                "name": "slides",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/assets/json/slides.data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    src: 'url(assets/images/--501-Edit.jpg)',\n    alt: 'Wedding Photography Destination Belize',\n    slider: {\n      width: 400,\n      height: 500,\n      sliderClass: '',\n      header: 'Exotic Locations',\n      headerColor: '',\n      subHeader: '',\n      subHeaderColor: '',\n      content: [\n        `In the heart of an exotic paradise, where azure waters kiss powdery sands and verdant palms sway in rhythm with love's gentle dance, wedding portraits \n      transcend mere snapshots; they become timeless canvases of romance and adventure. Against a backdrop of majestic mountains or \n      beneath the vibrant hues of a tropical sunset, the couple's love story unfolds in each captured moment.`,\n        `A moment suspended in time, where love, beauty, and paradise intertwine in perfect harmony.`,\n      ],\n      contentColor: '',\n      origin: '0 -550 -500 0',\n      destination: '0 250 50 0',\n    },\n  },\n  {\n    src: 'url(assets/images/--98-Edit.jpg)',\n    alt: 'Two Flower Girls',\n    slider: {\n      width: 350,\n      height: 500,\n      sliderClass: '',\n      header: 'Precious Memories',\n      headerColor: '',\n      subHeader: '',\n      subHeaderColor: '',\n      content: [\n        `In a tropical paradise, small feet leave imprints in soft sand, giggles dancing in the warm breeze. Sun-kissed faces adorned with bright smiles, chasing each other down pristine beaches. Innocent eyes marvel at vibrant corals, tiny fingers tracing patterns in tide pools, accompanied by seagulls on sun-drenched shores.`,\n        `Nights alive with the enchanting chorus of crickets, as little ones drift off to dreams under a canopy of stars. These moments, woven into the fabric of paradise, become the timeless jewels of childhood, sparkling with the magic of the tropics, forever etched in the heart's treasure trove.`,\n      ],\n      contentColor: '',\n      origin: '0 500 -320',\n      destination: '0 650 0 250',\n    },\n  },\n  {\n    src: 'url(assets/images/--Edit-2121.jpg)',\n    alt: 'Happy Hour Bridesmaids',\n  },\n  {\n    src: 'url(assets/images/--115-Edit.jpg)',\n    alt: 'Couple Kissing Sunset',\n  },\n  {\n    src: 'url(assets/images/--0161-Edit.jpg)',\n    alt: 'Married Couple Walking on Beach',\n  },\n  {\n    src: 'url(assets/images/--281-Edit.3.jpg)',\n    alt: 'Married Couple Kissing Underwater',\n  },\n  {\n    src: 'url(assets/images/49-Edit-Edit.jpg)',\n    alt: 'Portrait Lady Chair Ocean',\n  },\n  {\n    src: 'url(assets/images/--135-Edit.jpg)',\n    alt: 'Sea Turtle Underwater',\n  },\n]"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/app/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\n  providers: [\n    {\n      provide: DATE_PIPE_DEFAULT_OPTIONS,\n      useValue: { dateFormat: 'longDate' },\n    },\n    provideHttpClient(),\n    provideAnimationsAsync(),\n    provideRouter(\n      routes,\n      withPreloading(PreloadAllModules),\n      // withDebugTracing(),\n      withViewTransitions()\n    ),\n  ],\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  baseAPIUrl: 'http://localhost:3000',\n  API: '/api',\n}"
                }
            ],
            "src/assets/json/slides.data.ts": [
                {
                    "name": "homeSlide",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/assets/json/slides.data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  src: 'url(assets/images/--155-Edit-Edit.jpg)',\n  alt: 'photo 1',\n  slider: {\n    width: 0,\n    height: '',\n    sliderClass: 'coral',\n    header: 'Wedding Photography',\n    headerColor: '',\n    subHeader: '',\n    subHeaderColor: '',\n    content:\n      \"Professional wedding photography is an art form that goes beyond capturing moments; it encapsulates emotions, stories, and the essence of one of the most significant days in a couple's life. It involves a delicate balance of technical expertise, creativity, and interpersonal skills to deliver timeless images that evoke nostalgia and joy for years to come.        \",\n    contentColor: '',\n    origin: '-350 250 0 0',\n    destination: '100 350 0 0',\n  },\n}"
                },
                {
                    "name": "slides",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/assets/json/slides.data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    src: 'url(assets/images/--501-Edit.jpg)',\n    alt: 'Wedding Photography Destination Belize',\n    slider: {\n      width: 400,\n      height: 500,\n      sliderClass: '',\n      header: 'Exotic Locations',\n      headerColor: '',\n      subHeader: '',\n      subHeaderColor: '',\n      content: [\n        `In the heart of an exotic paradise, where azure waters kiss powdery sands and verdant palms sway in rhythm with love's gentle dance, wedding portraits \n      transcend mere snapshots; they become timeless canvases of romance and adventure. Against a backdrop of majestic mountains or \n      beneath the vibrant hues of a tropical sunset, the couple's love story unfolds in each captured moment.`,\n        `A moment suspended in time, where love, beauty, and paradise intertwine in perfect harmony.`,\n      ],\n      contentColor: '',\n      origin: '0 -550 -500 0',\n      destination: '0 250 50 0',\n    },\n  },\n  {\n    src: 'url(assets/images/--98-Edit.jpg)',\n    alt: 'Two Flower Girls',\n    slider: {\n      width: 350,\n      height: 500,\n      sliderClass: '',\n      header: 'Precious Memories',\n      headerColor: '',\n      subHeader: '',\n      subHeaderColor: '',\n      content: [\n        `In a tropical paradise, small feet leave imprints in soft sand, giggles dancing in the warm breeze. Sun-kissed faces adorned with bright smiles, chasing each other down pristine beaches. Innocent eyes marvel at vibrant corals, tiny fingers tracing patterns in tide pools, accompanied by seagulls on sun-drenched shores.`,\n        `Nights alive with the enchanting chorus of crickets, as little ones drift off to dreams under a canopy of stars. These moments, woven into the fabric of paradise, become the timeless jewels of childhood, sparkling with the magic of the tropics, forever etched in the heart's treasure trove.`,\n      ],\n      contentColor: '',\n      origin: '0 500 -320',\n      destination: '0 650 0 250',\n    },\n  },\n  {\n    src: 'url(assets/images/--Edit-2121.jpg)',\n    alt: 'Happy Hour Bridesmaids',\n  },\n  {\n    src: 'url(assets/images/--115-Edit.jpg)',\n    alt: 'Couple Kissing Sunset',\n  },\n  {\n    src: 'url(assets/images/--0161-Edit.jpg)',\n    alt: 'Married Couple Walking on Beach',\n  },\n  {\n    src: 'url(assets/images/--281-Edit.3.jpg)',\n    alt: 'Married Couple Kissing Underwater',\n  },\n  {\n    src: 'url(assets/images/49-Edit-Edit.jpg)',\n    alt: 'Portrait Lady Chair Ocean',\n  },\n  {\n    src: 'url(assets/images/--135-Edit.jpg)',\n    alt: 'Sea Turtle Underwater',\n  },\n]"
                }
            ],
            "src/app/components/page-elements/admin/images/upload/mime-type.validator.ts": [
                {
                    "name": "mimeType",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/page-elements/admin/images/upload/mime-type.validator.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(\n  control: AbstractControl\n): Promise<{ [key: string]: any }> | Observable<{ [key: string]: any } | null> => {\n  if (typeof control.value === 'string') {\n    return of(null);\n  }\n  const file = control.value as File;\n  const fileReader = new FileReader();\n  const frObs = Observable.create(\n    (observer: Observer<{ [key: string]: any }> | null) => {\n      fileReader.addEventListener('loadend', () => {\n        const arr = new Uint8Array(fileReader.result as ArrayBuffer).subarray(\n          0,\n          4\n        );\n        let header = '';\n        let isValid = false;\n        for (let i = 0; i < arr.length; i++) {\n          header += arr[i].toString(16);\n        }\n        switch (header) {\n          case '89504e47':\n            isValid = true;\n            break;\n          case 'ffd8ffe0':\n          case 'ffd8ffe1':\n          case 'ffd8ffe2':\n          case 'ffd8ffe3':\n          case 'ffd8ffe8':\n            isValid = true;\n            break;\n          default:\n            isValid = false; // Or you can use the blob.type as fallback\n            break;\n        }\n        if (isValid) {\n          observer?.next({});\n        } else {\n          observer?.next({ invalidMimeType: true });\n        }\n        observer?.complete();\n      });\n      fileReader.readAsArrayBuffer(file);\n    }\n  );\n  return frObs;\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 2,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/adapters/albums.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AlbumsService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/adapters/carousel.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CarouselService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/adapters/domain.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DomainService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/adapters/image.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ImageService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/adapters/image.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Environment",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/adapters/tag.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TagService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/adapters/weather.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "WeatherService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/layout/footer/footer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FooterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/layout/nav-bar/nav-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavBarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/page-elements/admin/dashboard/dashboard.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AdminDashboardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/page-elements/admin/images/upload/image-upload.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ImageUploadComponent",
                "coveragePercent": 2,
                "coverageCount": "1/36",
                "status": "low"
            },
            {
                "filePath": "src/app/components/page-elements/admin/images/upload/mime-type.validator.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mimeType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/page-elements/admin/images/upload/progress/progress.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProgressComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/page-elements/admin/layout/footer/footer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AdminFooterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/page-elements/admin/layout/nav-bar/nav-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AdminNavBarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/page-elements/albums/albums.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AlbumsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/components/page-elements/carousel/carousel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CarouselComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/components/page-elements/weather/weather.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WeatherComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/page-elements/wills-bio/wills-bio.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WillsBioComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/sections/admin/admin.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AdminComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/sections/home/home-page/home-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomePageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/directives/dnd.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "DndDirective",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/directives/onCreate.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "OnCreate",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/image.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Image",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/tag.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Tag",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/assets/json/slides.data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "homeSlide",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/assets/json/slides.data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "slides",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            }
        ]
    }
}